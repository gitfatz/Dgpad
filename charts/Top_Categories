<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Articles by Classes Logarithmic Chart</title>

  <!-- amCharts 5 core and xy chart library -->
  <script src="https://cdn.amcharts.com/lib/5/index.js"></script>
  <script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
  <script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>

  <!-- Styles -->
  <style>
    #chartdiv {
      width: 100%;
      height: 500px;
    }
  </style>
</head>
<body>

  <!-- Chart container -->
  <div id="chartdiv"></div>

  <script>
    am5.ready(async function () {
      // Create root element
      var root = am5.Root.new("chartdiv");

      // Set themes
      root.setThemes([am5themes_Animated.new(root)]);

      // Create XY chart
      var chart = root.container.children.push(
        am5xy.XYChart.new(root, {
          panX: false,
          panY: false,
          wheelX: "none",
          wheelY: "none",
          paddingLeft: 0,
        })
      );

      // Hide zoom-out button
      chart.zoomOutButton.set("forceHidden", true);

      // Create Y-axis (Category Axis)
      var yRenderer = am5xy.AxisRendererY.new(root, {
        minGridDistance: 30,
        minorGridEnabled: true,
        inversed: true,
      });

      yRenderer.grid.template.set("location", 1);

      var yAxis = chart.yAxes.push(
        am5xy.CategoryAxis.new(root, {
          maxDeviation: 0,
          categoryField: "_id",  // _id represents the class
          renderer: yRenderer,
          tooltip: am5.Tooltip.new(root, { themeTags: ["axis"] }),
        })
      );

      // Create X-axis (Logarithmic Value Axis)
      var xAxis = chart.xAxes.push(
        am5xy.ValueAxis.new(root, {
          maxDeviation: 0,
          min: 1,
          logarithmic: true,  // Logarithmic scaling
          numberFormatter: am5.NumberFormatter.new(root, {
            numberFormat: "#,###a",
          }),
          extraMax: 0.1,
          renderer: am5xy.AxisRendererX.new(root, {
            strokeOpacity: 0.1,
            minGridDistance: 80,
          }),
        })
      );

      // Create Column Series
      var series = chart.series.push(
        am5xy.ColumnSeries.new(root, {
          name: "Series 1",
          xAxis: xAxis,
          yAxis: yAxis,
          valueXField: "count",  // count represents the articles count
          categoryYField: "_id", // _id represents the class
          tooltip: am5.Tooltip.new(root, {
            pointerOrientation: "left",
            labelText: "{valueX}",  // Display article count in tooltip
          }),
        })
      );

      // Set rounded corners for columns
      series.columns.template.setAll({
        cornerRadiusTR: 5,
        cornerRadiusBR: 5,
        strokeOpacity: 0,
      });

      // Assign color to columns based on index
      series.columns.template.adapters.add("fill", function (fill, target) {
        return chart.get("colors").getIndex(series.columns.indexOf(target));
      });

      series.columns.template.adapters.add("stroke", function (stroke, target) {
        return chart.get("colors").getIndex(series.columns.indexOf(target));
      });

      // Add X-axis label
      xAxis.children.push(
        am5.Label.new(root, {
          text: "Articles Count",
          fontSize: "1em",
          fontWeight: "600",
          fill: am5.color(0x555555),
          x: am5.p50,
          centerX: am5.p50,
          centerY: am5.p100,
          dy: 20,
        })
      );

      // Add Y-axis label
      yAxis.children.unshift(
        am5.Label.new(root, {
          text: "Classes",
          fontSize: "1em",
          fontWeight: "600",
          fill: am5.color(0x555555),
          rotation: -90,
          y: am5.p50,
          centerY: am5.p50,
          centerX: am5.p100,
          dx: -30,
        })
      );

      // Fetch data from the API
      async function getArticlesByClass() {
        const response = await fetch("http://127.0.0.1:5000/articles_by_classes");
        const data = await response.json();
        return data;
      }

      // Fetch and set data
      let data = await getArticlesByClass();
      yAxis.data.setAll(data);
      series.data.setAll(data);

      // Set up chart cursor
      chart.set(
        "cursor",
        am5xy.XYCursor.new(root, {
          behavior: "none",
          xAxis: xAxis,
          yAxis: yAxis,
        })
      );

      // Animate chart on load
      series.appear(1000);
      chart.appear(1000, 100);
    });
  </script>

</body>
</html>
