<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Articles by Keyword Count</title>
    <!-- Include amCharts library and themes -->
    <script src="https://cdn.amcharts.com/lib/5/index.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>
    <style>
        #chartdiv {
            width: 100%;
            height: 500px;
        }
    </style>
</head>
<body>

<div id="chartdiv"></div>

<script>
am5.ready(async function () {
  // Create the chart root container
  var root = am5.Root.new("chartdiv");

  // Apply the animated theme
  root.setThemes([am5themes_Animated.new(root)]);

  // Create an XY chart
  var chart = root.container.children.push(
    am5xy.XYChart.new(root, {
      panX: true,
      panY: true,
      wheelX: "panX",
      wheelY: "zoomX",
      pinchZoomX: true,
      paddingLeft: 0,
      paddingRight: 1,
    })
  );

  // Set up X axis (Category Axis for keywords)
  var xAxis = chart.xAxes.push(
    am5xy.CategoryAxis.new(root, {
      maxDeviation: 0.3,
      categoryField: "_id",
      renderer: am5xy.AxisRendererX.new(root, {}),
      tooltip: am5.Tooltip.new(root, {}),
    })
  );

  // Set up Y axis (Value Axis for article counts)
  var yAxis = chart.yAxes.push(
    am5xy.ValueAxis.new(root, {
      renderer: am5xy.AxisRendererY.new(root, {}),
    })
  );

  // Create the column series to represent the articles count
  var series = chart.series.push(
    am5xy.ColumnSeries.new(root, {
      xAxis: xAxis,
      yAxis: yAxis,
      valueYField: "articles_count",
      categoryXField: "_id",
      tooltip: am5.Tooltip.new(root, {
        labelText: "{categoryX}: [bold]{valueY}[/]",
      }),
    })
  );

  // Customize the column appearance
  series.columns.template.setAll({
    cornerRadiusTL: 5,
    cornerRadiusTR: 5,
    strokeOpacity: 0,
  });

  // Set color adaptations for the columns
  series.columns.template.adapters.add("fill", function (fill, target) {
    return chart.get("colors").getIndex(series.columns.indexOf(target));
  });

  series.columns.template.adapters.add("stroke", function (stroke, target) {
    return chart.get("colors").getIndex(series.columns.indexOf(target));
  });

  // Add labels to X and Y axes
  xAxis.children.push(
    am5.Label.new(root, {
      text: "Keywords Count",
      fontSize: "1em",
      fontWeight: "600",
      fill: am5.color(0x555555),
      x: am5.p50,
      centerX: am5.p50,
      centerY: am5.p100,
      dy: 20,
    })
  );

  yAxis.children.unshift(
    am5.Label.new(root, {
      text: "Articles Count",
      fontSize: "1em",
      fontWeight: "600",
      fill: am5.color(0x555555),
      rotation: -90,
      y: am5.p50,
      centerY: am5.p50,
      centerX: am5.p100,
      dx: -30,
    })
  );

  // Fetch data for articles by keyword count
  async function getArticlesByKeywordCount() {
    const response = await fetch("http://127.0.0.1:5000/articles_by_keyword_count");
    const data = await response.json();
    return data;
  }

  // Fetch the data and update the chart
  let data = await getArticlesByKeywordCount();
  xAxis.data.setAll(data);
  series.data.setAll(data);

  // Enable cursor for zooming and panning
  chart.set("cursor", am5xy.XYCursor.new(root, {}));

  // Animate the chart appearance
  series.appear(1000);
  chart.appear(1000, 100);
});
</script>

</body>
</html>
